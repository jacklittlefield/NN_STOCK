{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('./assets/AAPL_COMB.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Close', 'Rates'], dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df = df.drop(['Volume', 'std', 'upper', 'lower'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['lag'] = df['Close'].shift()\n",
    "df['std_1'] = df['Close'].rolling(5).std().dropna().shift()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Close</th>\n",
       "      <th>Rates</th>\n",
       "      <th>lag</th>\n",
       "      <th>std_1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2000-11-10</td>\n",
       "      <td>1.361607</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.441964</td>\n",
       "      <td>0.065642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2000-11-13</td>\n",
       "      <td>1.383929</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.361607</td>\n",
       "      <td>0.070133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2000-11-14</td>\n",
       "      <td>1.446429</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.383929</td>\n",
       "      <td>0.062180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2000-11-15</td>\n",
       "      <td>1.419643</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.446429</td>\n",
       "      <td>0.038221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2000-11-16</td>\n",
       "      <td>1.357143</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.419643</td>\n",
       "      <td>0.036949</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date     Close  Rates       lag     std_1\n",
       "5  2000-11-10  1.361607   6.17  1.441964  0.065642\n",
       "6  2000-11-13  1.383929   6.17  1.361607  0.070133\n",
       "7  2000-11-14  1.446429   6.17  1.383929  0.062180\n",
       "8  2000-11-15  1.419643   6.17  1.446429  0.038221\n",
       "9  2000-11-16  1.357143   6.17  1.419643  0.036949"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['std'] = df['Close'].rolling(5).std().dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.set_index('Date', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For GE I am going to make my train test split on the year 2014"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = df[:'2014']\n",
    "test_df = df['2015':]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Rates</th>\n",
       "      <th>lag</th>\n",
       "      <th>std_1</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2014-12-24</th>\n",
       "      <td>112.010002</td>\n",
       "      <td>0.03</td>\n",
       "      <td>112.540001</td>\n",
       "      <td>1.437159</td>\n",
       "      <td>0.476687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-26</th>\n",
       "      <td>113.989998</td>\n",
       "      <td>0.03</td>\n",
       "      <td>112.010002</td>\n",
       "      <td>0.476687</td>\n",
       "      <td>0.874396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-29</th>\n",
       "      <td>113.910004</td>\n",
       "      <td>0.03</td>\n",
       "      <td>113.989998</td>\n",
       "      <td>0.874396</td>\n",
       "      <td>0.862131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-30</th>\n",
       "      <td>112.519997</td>\n",
       "      <td>0.03</td>\n",
       "      <td>113.910004</td>\n",
       "      <td>0.862131</td>\n",
       "      <td>0.898627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2014-12-31</th>\n",
       "      <td>110.379997</td>\n",
       "      <td>0.03</td>\n",
       "      <td>112.519997</td>\n",
       "      <td>0.898627</td>\n",
       "      <td>1.493645</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Close  Rates         lag     std_1       std\n",
       "Date                                                         \n",
       "2014-12-24  112.010002   0.03  112.540001  1.437159  0.476687\n",
       "2014-12-26  113.989998   0.03  112.010002  0.476687  0.874396\n",
       "2014-12-29  113.910004   0.03  113.989998  0.874396  0.862131\n",
       "2014-12-30  112.519997   0.03  113.910004  0.862131  0.898627\n",
       "2014-12-31  110.379997   0.03  112.519997  0.898627  1.493645"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Rates</th>\n",
       "      <th>lag</th>\n",
       "      <th>std_1</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-10-02</th>\n",
       "      <td>229.279999</td>\n",
       "      <td>2.03</td>\n",
       "      <td>227.259995</td>\n",
       "      <td>2.765297</td>\n",
       "      <td>3.299545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-03</th>\n",
       "      <td>232.070007</td>\n",
       "      <td>2.03</td>\n",
       "      <td>229.279999</td>\n",
       "      <td>3.299545</td>\n",
       "      <td>2.875024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-04</th>\n",
       "      <td>227.990005</td>\n",
       "      <td>2.03</td>\n",
       "      <td>232.070007</td>\n",
       "      <td>2.875024</td>\n",
       "      <td>2.385556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-05</th>\n",
       "      <td>224.289993</td>\n",
       "      <td>2.03</td>\n",
       "      <td>227.990005</td>\n",
       "      <td>2.385556</td>\n",
       "      <td>2.844152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-08</th>\n",
       "      <td>223.770004</td>\n",
       "      <td>2.03</td>\n",
       "      <td>224.289993</td>\n",
       "      <td>2.844152</td>\n",
       "      <td>3.482401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Close  Rates         lag     std_1       std\n",
       "Date                                                         \n",
       "2018-10-02  229.279999   2.03  227.259995  2.765297  3.299545\n",
       "2018-10-03  232.070007   2.03  229.279999  3.299545  2.875024\n",
       "2018-10-04  227.990005   2.03  232.070007  2.875024  2.385556\n",
       "2018-10-05  224.289993   2.03  227.990005  2.385556  2.844152\n",
       "2018-10-08  223.770004   2.03  224.289993  2.844152  3.482401"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To see this visually, we can make a line plot of the train and test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py:3778: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  return super(DataFrame, self).rename(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "graph_df_train = train_df\n",
    "maper = {'Close':'Train'}\n",
    "graph_df_train.rename(maper, axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py:3778: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  return super(DataFrame, self).rename(**kwargs)\n"
     ]
    }
   ],
   "source": [
    "graph_df_test = test_df\n",
    "maper = {'Close':'Test'}\n",
    "graph_df_test.rename(maper, axis = 1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(graph_df_train['Train'])\n",
    "plt.plot(graph_df_test['Test'])\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, 2014 is a year where the pattern of a downward trend may begin again. Lets build a model to find out. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Rates</th>\n",
       "      <th>lag</th>\n",
       "      <th>std_1</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-11-16</th>\n",
       "      <td>1.357143</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.419643</td>\n",
       "      <td>0.036949</td>\n",
       "      <td>0.038455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-11-17</th>\n",
       "      <td>1.321429</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.357143</td>\n",
       "      <td>0.038455</td>\n",
       "      <td>0.049471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-11-20</th>\n",
       "      <td>1.352679</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.321429</td>\n",
       "      <td>0.049471</td>\n",
       "      <td>0.051678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-11-21</th>\n",
       "      <td>1.343750</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.352679</td>\n",
       "      <td>0.051678</td>\n",
       "      <td>0.036623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-11-22</th>\n",
       "      <td>1.321429</td>\n",
       "      <td>6.17</td>\n",
       "      <td>1.343750</td>\n",
       "      <td>0.036623</td>\n",
       "      <td>0.016999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Close  Rates       lag     std_1       std\n",
       "Date                                                     \n",
       "2000-11-16  1.357143   6.17  1.419643  0.036949  0.038455\n",
       "2000-11-17  1.321429   6.17  1.357143  0.038455  0.049471\n",
       "2000-11-20  1.352679   6.17  1.321429  0.049471  0.051678\n",
       "2000-11-21  1.343750   6.17  1.352679  0.051678  0.036623\n",
       "2000-11-22  1.321429   6.17  1.343750  0.036623  0.016999"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df = df[:'2014']\n",
    "test_df = df['2015':]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Rates</th>\n",
       "      <th>lag</th>\n",
       "      <th>std_1</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2015-01-02</th>\n",
       "      <td>109.330002</td>\n",
       "      <td>0.03</td>\n",
       "      <td>110.379997</td>\n",
       "      <td>1.493645</td>\n",
       "      <td>2.099317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-05</th>\n",
       "      <td>106.250000</td>\n",
       "      <td>0.03</td>\n",
       "      <td>109.330002</td>\n",
       "      <td>2.099317</td>\n",
       "      <td>2.964452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-06</th>\n",
       "      <td>106.260002</td>\n",
       "      <td>0.03</td>\n",
       "      <td>106.250000</td>\n",
       "      <td>2.964452</td>\n",
       "      <td>2.713864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-07</th>\n",
       "      <td>107.750000</td>\n",
       "      <td>0.03</td>\n",
       "      <td>106.260002</td>\n",
       "      <td>2.713864</td>\n",
       "      <td>1.842940</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2015-01-08</th>\n",
       "      <td>111.889999</td>\n",
       "      <td>0.03</td>\n",
       "      <td>107.750000</td>\n",
       "      <td>1.842940</td>\n",
       "      <td>2.377788</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Close  Rates         lag     std_1       std\n",
       "Date                                                         \n",
       "2015-01-02  109.330002   0.03  110.379997  1.493645  2.099317\n",
       "2015-01-05  106.250000   0.03  109.330002  2.099317  2.964452\n",
       "2015-01-06  106.260002   0.03  106.250000  2.964452  2.713864\n",
       "2015-01-07  107.750000   0.03  106.260002  2.713864  1.842940\n",
       "2015-01-08  111.889999   0.03  107.750000  1.842940  2.377788"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scale Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X_train = train_df[['lag', 'std_1', 'Rates']].values\n",
    "#X_test = test_df[['lag', 'std_1', 'Rates']].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = train_df[['lag']].values\n",
    "X_test = test_df[['lag']].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  1.419643],\n",
       "       [  1.357143],\n",
       "       [  1.321429],\n",
       "       ...,\n",
       "       [113.989998],\n",
       "       [113.910004],\n",
       "       [112.519997]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_df_sc = scaler.fit_transform(X_train)\n",
    "test_df_sc = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3551, 1)\n",
      "(949, 1)\n"
     ]
    }
   ],
   "source": [
    "print(train_df_sc.shape)\n",
    "print(test_df_sc.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.00408681],\n",
       "       [0.00355743],\n",
       "       [0.00325493],\n",
       "       ...,\n",
       "       [0.95756496],\n",
       "       [0.95688741],\n",
       "       [0.94511396]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df_sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import SVR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "svr = SVR()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train = train_df['Close'].values.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3551"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3551"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "SVR(C=1.0, cache_size=200, coef0=0.0, degree=3, epsilon=0.1, gamma='auto',\n",
       "  kernel='rbf', max_iter=-1, shrinking=True, tol=0.001, verbose=False)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = svr.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "949"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a125bd4a8>]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.plot(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test = test_df['Close'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a126d3160>]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(test_df['Close'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-185.41590425850097"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_pred, test_df['Close'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Couldn't import dot_parser, loading of dot files will not be possible.\n"
     ]
    }
   ],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "3551/3551 [==============================] - 1s 278us/step - loss: 1451.2479\n",
      "Epoch 2/200\n",
      "3551/3551 [==============================] - 1s 171us/step - loss: 783.0780\n",
      "Epoch 3/200\n",
      "3551/3551 [==============================] - 1s 160us/step - loss: 289.9668\n",
      "Epoch 4/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 86.3367\n",
      "Epoch 5/200\n",
      "3551/3551 [==============================] - 1s 160us/step - loss: 34.7945\n",
      "Epoch 6/200\n",
      "3551/3551 [==============================] - 1s 186us/step - loss: 18.9965\n",
      "Epoch 7/200\n",
      "3551/3551 [==============================] - 1s 173us/step - loss: 12.4520\n",
      "Epoch 8/200\n",
      "3551/3551 [==============================] - 1s 185us/step - loss: 9.2401\n",
      "Epoch 9/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 6.7753\n",
      "Epoch 10/200\n",
      "3551/3551 [==============================] - 1s 168us/step - loss: 5.0668\n",
      "Epoch 11/200\n",
      "3551/3551 [==============================] - 1s 181us/step - loss: 3.6702\n",
      "Epoch 12/200\n",
      "3551/3551 [==============================] - 1s 180us/step - loss: 2.8730\n",
      "Epoch 13/200\n",
      "3551/3551 [==============================] - 1s 172us/step - loss: 2.6253\n",
      "Epoch 14/200\n",
      "3551/3551 [==============================] - 1s 177us/step - loss: 2.1565\n",
      "Epoch 15/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 1.8126\n",
      "Epoch 16/200\n",
      "3551/3551 [==============================] - 1s 155us/step - loss: 2.1227\n",
      "Epoch 17/200\n",
      "3551/3551 [==============================] - 1s 158us/step - loss: 1.7294\n",
      "Epoch 18/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 1.4914\n",
      "Epoch 19/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 1.4410\n",
      "Epoch 20/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 1.4223\n",
      "Epoch 21/200\n",
      "3551/3551 [==============================] - 1s 187us/step - loss: 1.2565\n",
      "Epoch 22/200\n",
      "3551/3551 [==============================] - 1s 178us/step - loss: 1.3917\n",
      "Epoch 23/200\n",
      "3551/3551 [==============================] - 1s 191us/step - loss: 1.1085\n",
      "Epoch 24/200\n",
      "3551/3551 [==============================] - 1s 182us/step - loss: 1.3786\n",
      "Epoch 25/200\n",
      "3551/3551 [==============================] - 1s 175us/step - loss: 1.4463\n",
      "Epoch 26/200\n",
      "3551/3551 [==============================] - 1s 152us/step - loss: 1.1409\n",
      "Epoch 27/200\n",
      "3551/3551 [==============================] - 1s 150us/step - loss: 1.1772\n",
      "Epoch 28/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 1.0817\n",
      "Epoch 29/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 1.2689\n",
      "Epoch 30/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 1.1474\n",
      "Epoch 31/200\n",
      "3551/3551 [==============================] - 1s 168us/step - loss: 1.2282\n",
      "Epoch 32/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 1.0413\n",
      "Epoch 33/200\n",
      "3551/3551 [==============================] - 1s 174us/step - loss: 1.0060\n",
      "Epoch 34/200\n",
      "3551/3551 [==============================] - 1s 174us/step - loss: 0.9722\n",
      "Epoch 35/200\n",
      "3551/3551 [==============================] - 1s 175us/step - loss: 1.0723\n",
      "Epoch 36/200\n",
      "3551/3551 [==============================] - 1s 174us/step - loss: 0.9409\n",
      "Epoch 37/200\n",
      "3551/3551 [==============================] - 1s 185us/step - loss: 1.1740\n",
      "Epoch 38/200\n",
      "3551/3551 [==============================] - 1s 178us/step - loss: 0.9101\n",
      "Epoch 39/200\n",
      "3551/3551 [==============================] - 1s 176us/step - loss: 1.0486\n",
      "Epoch 40/200\n",
      "3551/3551 [==============================] - 1s 167us/step - loss: 1.0520\n",
      "Epoch 41/200\n",
      "3551/3551 [==============================] - 1s 171us/step - loss: 0.9945\n",
      "Epoch 42/200\n",
      "3551/3551 [==============================] - 1s 172us/step - loss: 1.0390\n",
      "Epoch 43/200\n",
      "3551/3551 [==============================] - 1s 186us/step - loss: 1.3149\n",
      "Epoch 44/200\n",
      "3551/3551 [==============================] - 1s 201us/step - loss: 1.1886\n",
      "Epoch 45/200\n",
      "3551/3551 [==============================] - 1s 179us/step - loss: 0.9135\n",
      "Epoch 46/200\n",
      "3551/3551 [==============================] - 1s 169us/step - loss: 0.8841\n",
      "Epoch 47/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 1.1813\n",
      "Epoch 48/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 0.9288\n",
      "Epoch 49/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 0.9339\n",
      "Epoch 50/200\n",
      "3551/3551 [==============================] - 1s 149us/step - loss: 0.9741\n",
      "Epoch 51/200\n",
      "3551/3551 [==============================] - 1s 168us/step - loss: 0.9119\n",
      "Epoch 52/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 1.0305\n",
      "Epoch 53/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.8702\n",
      "Epoch 54/200\n",
      "3551/3551 [==============================] - 1s 158us/step - loss: 0.9307\n",
      "Epoch 55/200\n",
      "3551/3551 [==============================] - 1s 156us/step - loss: 1.0625\n",
      "Epoch 56/200\n",
      "3551/3551 [==============================] - 1s 152us/step - loss: 0.8328\n",
      "Epoch 57/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.9381\n",
      "Epoch 58/200\n",
      "3551/3551 [==============================] - 1s 167us/step - loss: 0.9146\n",
      "Epoch 59/200\n",
      "3551/3551 [==============================] - 1s 188us/step - loss: 0.9700\n",
      "Epoch 60/200\n",
      "3551/3551 [==============================] - 1s 172us/step - loss: 0.8600\n",
      "Epoch 61/200\n",
      "3551/3551 [==============================] - 0s 136us/step - loss: 0.8552\n",
      "Epoch 62/200\n",
      "3551/3551 [==============================] - 0s 125us/step - loss: 0.8755\n",
      "Epoch 63/200\n",
      "3551/3551 [==============================] - 1s 156us/step - loss: 0.9509\n",
      "Epoch 64/200\n",
      "3551/3551 [==============================] - 0s 139us/step - loss: 1.2126\n",
      "Epoch 65/200\n",
      "3551/3551 [==============================] - 0s 136us/step - loss: 1.1253\n",
      "Epoch 66/200\n",
      "3551/3551 [==============================] - 0s 118us/step - loss: 1.0279\n",
      "Epoch 67/200\n",
      "3551/3551 [==============================] - 0s 139us/step - loss: 0.7401\n",
      "Epoch 68/200\n",
      "3551/3551 [==============================] - 0s 120us/step - loss: 1.0010\n",
      "Epoch 69/200\n",
      "3551/3551 [==============================] - 0s 134us/step - loss: 0.9402\n",
      "Epoch 70/200\n",
      "3551/3551 [==============================] - 0s 131us/step - loss: 1.1348\n",
      "Epoch 71/200\n",
      "3551/3551 [==============================] - 0s 132us/step - loss: 0.9646\n",
      "Epoch 72/200\n",
      "3551/3551 [==============================] - 0s 129us/step - loss: 0.9152\n",
      "Epoch 73/200\n",
      "3551/3551 [==============================] - 0s 131us/step - loss: 1.0578\n",
      "Epoch 74/200\n",
      "3551/3551 [==============================] - 1s 161us/step - loss: 0.8011\n",
      "Epoch 75/200\n",
      "3551/3551 [==============================] - 1s 149us/step - loss: 0.9231\n",
      "Epoch 76/200\n",
      "3551/3551 [==============================] - 0s 132us/step - loss: 1.0062\n",
      "Epoch 77/200\n",
      "3551/3551 [==============================] - 0s 127us/step - loss: 0.8230\n",
      "Epoch 78/200\n",
      "3551/3551 [==============================] - 0s 130us/step - loss: 0.9860 0s - loss: \n",
      "Epoch 79/200\n",
      "3551/3551 [==============================] - 0s 129us/step - loss: 0.8505\n",
      "Epoch 80/200\n",
      "3551/3551 [==============================] - 0s 130us/step - loss: 0.8500\n",
      "Epoch 81/200\n",
      "3551/3551 [==============================] - 0s 132us/step - loss: 0.8435\n",
      "Epoch 82/200\n",
      "3551/3551 [==============================] - 0s 135us/step - loss: 1.0421\n",
      "Epoch 83/200\n",
      "3551/3551 [==============================] - 0s 136us/step - loss: 0.7705\n",
      "Epoch 84/200\n",
      "3551/3551 [==============================] - 0s 126us/step - loss: 0.9883\n",
      "Epoch 85/200\n",
      "3551/3551 [==============================] - 0s 136us/step - loss: 0.8519\n",
      "Epoch 86/200\n",
      "3551/3551 [==============================] - 0s 127us/step - loss: 0.7378\n",
      "Epoch 87/200\n",
      "3551/3551 [==============================] - 0s 134us/step - loss: 0.8704\n",
      "Epoch 88/200\n",
      "3551/3551 [==============================] - 0s 129us/step - loss: 0.8949\n",
      "Epoch 89/200\n",
      "3551/3551 [==============================] - 0s 122us/step - loss: 0.8139\n",
      "Epoch 90/200\n",
      "3551/3551 [==============================] - 0s 119us/step - loss: 0.8823\n",
      "Epoch 91/200\n",
      "3551/3551 [==============================] - 0s 127us/step - loss: 0.7738\n",
      "Epoch 92/200\n",
      "3551/3551 [==============================] - 0s 137us/step - loss: 0.7875\n",
      "Epoch 93/200\n",
      "3551/3551 [==============================] - 0s 137us/step - loss: 1.0667\n",
      "Epoch 94/200\n",
      "3551/3551 [==============================] - 1s 141us/step - loss: 0.8834\n",
      "Epoch 95/200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3551/3551 [==============================] - 0s 125us/step - loss: 0.8561\n",
      "Epoch 96/200\n",
      "3551/3551 [==============================] - 0s 120us/step - loss: 0.8333\n",
      "Epoch 97/200\n",
      "3551/3551 [==============================] - 0s 134us/step - loss: 0.9868\n",
      "Epoch 98/200\n",
      "3551/3551 [==============================] - 0s 129us/step - loss: 0.9664\n",
      "Epoch 99/200\n",
      "3551/3551 [==============================] - 0s 135us/step - loss: 0.8537\n",
      "Epoch 100/200\n",
      "3551/3551 [==============================] - 1s 148us/step - loss: 1.2537 0s - loss: 1.1\n",
      "Epoch 101/200\n",
      "3551/3551 [==============================] - 0s 133us/step - loss: 0.9865\n",
      "Epoch 102/200\n",
      "3551/3551 [==============================] - 0s 130us/step - loss: 1.0686\n",
      "Epoch 103/200\n",
      "3551/3551 [==============================] - 0s 130us/step - loss: 0.8426\n",
      "Epoch 104/200\n",
      "3551/3551 [==============================] - 0s 139us/step - loss: 0.8852\n",
      "Epoch 105/200\n",
      "3551/3551 [==============================] - 1s 142us/step - loss: 0.7980\n",
      "Epoch 106/200\n",
      "3551/3551 [==============================] - 0s 134us/step - loss: 0.8405\n",
      "Epoch 107/200\n",
      "3551/3551 [==============================] - 0s 135us/step - loss: 0.8815\n",
      "Epoch 108/200\n",
      "3551/3551 [==============================] - 1s 142us/step - loss: 0.7155\n",
      "Epoch 109/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.8009\n",
      "Epoch 110/200\n",
      "3551/3551 [==============================] - 0s 138us/step - loss: 0.7859\n",
      "Epoch 111/200\n",
      "3551/3551 [==============================] - 0s 134us/step - loss: 0.8805\n",
      "Epoch 112/200\n",
      "3551/3551 [==============================] - 0s 132us/step - loss: 0.8416\n",
      "Epoch 113/200\n",
      "3551/3551 [==============================] - 1s 146us/step - loss: 0.8758\n",
      "Epoch 114/200\n",
      "3551/3551 [==============================] - 0s 124us/step - loss: 0.9906\n",
      "Epoch 115/200\n",
      "3551/3551 [==============================] - 0s 125us/step - loss: 0.8369\n",
      "Epoch 116/200\n",
      "3551/3551 [==============================] - 1s 153us/step - loss: 0.8147\n",
      "Epoch 117/200\n",
      "3551/3551 [==============================] - 1s 156us/step - loss: 0.9144\n",
      "Epoch 118/200\n",
      "3551/3551 [==============================] - 1s 142us/step - loss: 1.1027\n",
      "Epoch 119/200\n",
      "3551/3551 [==============================] - 0s 132us/step - loss: 0.9018\n",
      "Epoch 120/200\n",
      "3551/3551 [==============================] - 1s 145us/step - loss: 0.7989\n",
      "Epoch 121/200\n",
      "3551/3551 [==============================] - 1s 192us/step - loss: 0.7515\n",
      "Epoch 122/200\n",
      "3551/3551 [==============================] - 1s 153us/step - loss: 0.8146\n",
      "Epoch 123/200\n",
      "3551/3551 [==============================] - 0s 132us/step - loss: 0.8107 0s - loss: 0\n",
      "Epoch 124/200\n",
      "3551/3551 [==============================] - 0s 126us/step - loss: 0.7683\n",
      "Epoch 125/200\n",
      "3551/3551 [==============================] - 1s 189us/step - loss: 0.8528\n",
      "Epoch 126/200\n",
      "3551/3551 [==============================] - 1s 178us/step - loss: 0.7770\n",
      "Epoch 127/200\n",
      "3551/3551 [==============================] - 1s 193us/step - loss: 0.8601\n",
      "Epoch 128/200\n",
      "3551/3551 [==============================] - 1s 193us/step - loss: 1.0879\n",
      "Epoch 129/200\n",
      "3551/3551 [==============================] - 1s 197us/step - loss: 0.9980\n",
      "Epoch 130/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 0.9027\n",
      "Epoch 131/200\n",
      "3551/3551 [==============================] - 1s 171us/step - loss: 0.7906\n",
      "Epoch 132/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 0.9683\n",
      "Epoch 133/200\n",
      "3551/3551 [==============================] - 1s 190us/step - loss: 0.8412\n",
      "Epoch 134/200\n",
      "3551/3551 [==============================] - 1s 196us/step - loss: 0.7533\n",
      "Epoch 135/200\n",
      "3551/3551 [==============================] - 1s 179us/step - loss: 0.7698\n",
      "Epoch 136/200\n",
      "3551/3551 [==============================] - 1s 169us/step - loss: 0.8699\n",
      "Epoch 137/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 0.9229\n",
      "Epoch 138/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 0.8633\n",
      "Epoch 139/200\n",
      "3551/3551 [==============================] - 1s 170us/step - loss: 0.8178\n",
      "Epoch 140/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 0.8438\n",
      "Epoch 141/200\n",
      "3551/3551 [==============================] - 1s 162us/step - loss: 0.8657\n",
      "Epoch 142/200\n",
      "3551/3551 [==============================] - 1s 158us/step - loss: 0.8741 0s - loss: 0.\n",
      "Epoch 143/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 0.7868\n",
      "Epoch 144/200\n",
      "3551/3551 [==============================] - 1s 167us/step - loss: 1.0532\n",
      "Epoch 145/200\n",
      "3551/3551 [==============================] - 1s 167us/step - loss: 0.7063\n",
      "Epoch 146/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 1.0975 0s - loss: 1\n",
      "Epoch 147/200\n",
      "3551/3551 [==============================] - 1s 168us/step - loss: 0.9430\n",
      "Epoch 148/200\n",
      "3551/3551 [==============================] - 1s 172us/step - loss: 0.7506\n",
      "Epoch 149/200\n",
      "3551/3551 [==============================] - 1s 181us/step - loss: 0.7954\n",
      "Epoch 150/200\n",
      "3551/3551 [==============================] - 1s 173us/step - loss: 0.9607\n",
      "Epoch 151/200\n",
      "3551/3551 [==============================] - 1s 183us/step - loss: 0.8588\n",
      "Epoch 152/200\n",
      "3551/3551 [==============================] - 1s 177us/step - loss: 0.9647\n",
      "Epoch 153/200\n",
      "3551/3551 [==============================] - 1s 174us/step - loss: 1.3686\n",
      "Epoch 154/200\n",
      "3551/3551 [==============================] - 1s 171us/step - loss: 0.7963\n",
      "Epoch 155/200\n",
      "3551/3551 [==============================] - 1s 175us/step - loss: 0.8073\n",
      "Epoch 156/200\n",
      "3551/3551 [==============================] - 1s 169us/step - loss: 0.9755\n",
      "Epoch 157/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 0.8391\n",
      "Epoch 158/200\n",
      "3551/3551 [==============================] - 1s 178us/step - loss: 0.9673\n",
      "Epoch 159/200\n",
      "3551/3551 [==============================] - 1s 178us/step - loss: 0.8963\n",
      "Epoch 160/200\n",
      "3551/3551 [==============================] - 1s 171us/step - loss: 0.6973\n",
      "Epoch 161/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 0.9872\n",
      "Epoch 162/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 0.7798\n",
      "Epoch 163/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 0.7584\n",
      "Epoch 164/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 0.9249\n",
      "Epoch 165/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 1.0670\n",
      "Epoch 166/200\n",
      "3551/3551 [==============================] - 1s 161us/step - loss: 0.7667\n",
      "Epoch 167/200\n",
      "3551/3551 [==============================] - 1s 168us/step - loss: 0.9884\n",
      "Epoch 168/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.9838\n",
      "Epoch 169/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 0.9023\n",
      "Epoch 170/200\n",
      "3551/3551 [==============================] - 1s 160us/step - loss: 0.7829\n",
      "Epoch 171/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 0.8164\n",
      "Epoch 172/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.9398\n",
      "Epoch 173/200\n",
      "3551/3551 [==============================] - 1s 162us/step - loss: 1.2910\n",
      "Epoch 174/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 0.9549\n",
      "Epoch 175/200\n",
      "3551/3551 [==============================] - 1s 160us/step - loss: 0.7679\n",
      "Epoch 176/200\n",
      "3551/3551 [==============================] - 1s 162us/step - loss: 0.8014\n",
      "Epoch 177/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 0.7625\n",
      "Epoch 178/200\n",
      "3551/3551 [==============================] - 1s 164us/step - loss: 0.8253\n",
      "Epoch 179/200\n",
      "3551/3551 [==============================] - 1s 160us/step - loss: 0.8927\n",
      "Epoch 180/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.8807\n",
      "Epoch 181/200\n",
      "3551/3551 [==============================] - 1s 163us/step - loss: 0.7440\n",
      "Epoch 182/200\n",
      "3551/3551 [==============================] - 1s 157us/step - loss: 0.6849\n",
      "Epoch 183/200\n",
      "3551/3551 [==============================] - 1s 158us/step - loss: 0.7831\n",
      "Epoch 184/200\n",
      "3551/3551 [==============================] - 1s 159us/step - loss: 0.8993\n",
      "Epoch 185/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 0.8515\n",
      "Epoch 186/200\n",
      "3551/3551 [==============================] - 1s 166us/step - loss: 0.7640\n",
      "Epoch 187/200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3551/3551 [==============================] - 1s 158us/step - loss: 0.7708\n",
      "Epoch 188/200\n",
      "3551/3551 [==============================] - 1s 141us/step - loss: 0.7472\n",
      "Epoch 189/200\n",
      "3551/3551 [==============================] - 1s 144us/step - loss: 0.8310\n",
      "Epoch 190/200\n",
      "3551/3551 [==============================] - 1s 144us/step - loss: 0.7709\n",
      "Epoch 191/200\n",
      "3551/3551 [==============================] - 1s 157us/step - loss: 0.7551\n",
      "Epoch 192/200\n",
      "3551/3551 [==============================] - 1s 189us/step - loss: 0.8434\n",
      "Epoch 193/200\n",
      "3551/3551 [==============================] - 1s 165us/step - loss: 0.8300\n",
      "Epoch 194/200\n",
      "3551/3551 [==============================] - 1s 183us/step - loss: 0.9059\n",
      "Epoch 195/200\n",
      "3551/3551 [==============================] - 1s 162us/step - loss: 0.7941\n",
      "Epoch 196/200\n",
      "3551/3551 [==============================] - 1s 172us/step - loss: 1.0184\n",
      "Epoch 197/200\n",
      "3551/3551 [==============================] - 1s 177us/step - loss: 0.8105\n",
      "Epoch 198/200\n",
      "3551/3551 [==============================] - 1s 193us/step - loss: 0.7910\n",
      "Epoch 199/200\n",
      "3551/3551 [==============================] - 1s 179us/step - loss: 0.8657\n",
      "Epoch 200/200\n",
      "3551/3551 [==============================] - 1s 196us/step - loss: 0.8200\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a28f7c780>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(10, input_shape=(X_test.shape[1],), activation='tanh', kernel_initializer='lecun_uniform'))\n",
    "model.add(Dense(10, input_shape=(X_test.shape[1],)))\n",
    "model.add(Dense(1))\n",
    "model.compile(optimizer='adam', loss='mean_squared_error')\n",
    "model.fit(X_train, y_train, batch_size=16, epochs=200, verbose=1)\n",
    "#EarlyStopping(monitor='val_loss', min_delta=0.1, patience=.1, verbose=0, mode='auto')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3652473619705562"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(20,10))\n",
    "y_pred = model.predict(X_test)\n",
    "plt.plot(y_test, label = 'Actual')\n",
    "plt.plot(y_pred, label = 'Predictions')\n",
    "plt.legend()\n",
    "r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Close</th>\n",
       "      <th>Rates</th>\n",
       "      <th>lag</th>\n",
       "      <th>std_1</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-10-02</th>\n",
       "      <td>229.279999</td>\n",
       "      <td>2.03</td>\n",
       "      <td>227.259995</td>\n",
       "      <td>2.765297</td>\n",
       "      <td>3.299545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-03</th>\n",
       "      <td>232.070007</td>\n",
       "      <td>2.03</td>\n",
       "      <td>229.279999</td>\n",
       "      <td>3.299545</td>\n",
       "      <td>2.875024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-04</th>\n",
       "      <td>227.990005</td>\n",
       "      <td>2.03</td>\n",
       "      <td>232.070007</td>\n",
       "      <td>2.875024</td>\n",
       "      <td>2.385556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-05</th>\n",
       "      <td>224.289993</td>\n",
       "      <td>2.03</td>\n",
       "      <td>227.990005</td>\n",
       "      <td>2.385556</td>\n",
       "      <td>2.844152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-08</th>\n",
       "      <td>223.770004</td>\n",
       "      <td>2.03</td>\n",
       "      <td>224.289993</td>\n",
       "      <td>2.844152</td>\n",
       "      <td>3.482401</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Close  Rates         lag     std_1       std\n",
       "Date                                                         \n",
       "2018-10-02  229.279999   2.03  227.259995  2.765297  3.299545\n",
       "2018-10-03  232.070007   2.03  229.279999  3.299545  2.875024\n",
       "2018-10-04  227.990005   2.03  232.070007  2.875024  2.385556\n",
       "2018-10-05  224.289993   2.03  227.990005  2.385556  2.844152\n",
       "2018-10-08  223.770004   2.03  224.289993  2.844152  3.482401"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rate = 2\n",
    "lag = 222\n",
    "#std = 2.482"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_1 = np.array([[lag]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pred_1 = np.array([[0.00324675, 0.194511396, 0.30064325]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_1.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[141.15404]], dtype=float32)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.predict(pred_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:anaconda3]",
   "language": "python",
   "name": "conda-env-anaconda3-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
